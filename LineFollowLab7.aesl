<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="LEFT"/>
<constant value="2" name="RIGHT"/>
<constant value="300" name="EDGE"/>
<constant value="500" name="TARGET"/>
<constant value="3" name="LOST"/>
<constant value="2300" name="LOST_TIMER"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">#*  File: LineFollow
	Date: Jan, 2022
	Author: CSCI 1108: Experimental Robotics.
	Purpose: Lab 7, Dealing with Failure
	Description: A program that makes the Thymio Robot follow a black
	             taped line.
*#

var state = STOPPED                          # variable declarations

motor.left.target = 0                        # reset motors
motor.right.target = 0
call leds.circle(0,0,0,0,0,0,0,0)            # turn off LEDs
timer.period[0] = 0                          # turn off timer0

onevent button.forward                       # on forward button press
  state = LEFT                               # transition to LEFT state

onevent button.backward                      # on backward button press
  state = STOPPED                            # transition to STOPPED state
  motor.left.target = 0                      # stop motors
  motor.right.target = 0
  timer.period[0] = 0                        # turn pff timer0
  call leds.circle(0,0,0,0,0,0,0,0)          # turn off LEDs
	
onevent prox                                 # on prox event
  if state != STOPPED then                   # if robot is moving
    # if moving left and not sensing black line
    if state == LEFT and  prox.ground.delta[0] >= EDGE then
      state = RIGHT                          # transition to RIGHT state
      timer.period[0] = LOST_TIMER           # begin lost check (lost timer)
      motor.left.target = TARGET             # move right
      motor.right.target = 0
    end
    
    
    # if moving right and sensing black line
   
    if (state == RIGHT or state == LOST) and prox.ground.delta[1] &lt; EDGE then
      state = LEFT                           # transition to LEFT state
      timer.period[0] = 0                    # turn off timer0
      motor.left.target = 0                  # move left
      motor.right.target = TARGET
    end 
  end

onevent timer0
  state = LOST                               # transition to LOST state
  call leds.circle(32,32,32,32,32,32,32,32)  # turn on circle of LEDs
  timer.period[0] = 0                        # turn off timer0 (lost timer)
  motor.left.target = 150     # reverse RIGHT state motion
  motor.right.target = 150

</node>


</network>
